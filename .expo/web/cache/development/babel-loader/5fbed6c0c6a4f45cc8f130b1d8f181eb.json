{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\sideaside\\\\App.js\";\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport Home from \"./src/screens/Home\";\nimport Login from \"./src/screens/Login\";\nimport Loading from \"./src/screens/Loading\";\nimport Profile from \"./src/screens/Profile\";\nimport Test from \"./src/screens/Test\";\nimport Details from \"./src/screens/Details\";\nimport Icon from '@expo/vector-icons/FontAwesome';\nimport { Provider } from 'react-redux';\nimport store from \"./src/store/\";\nimport { AppLoading } from 'expo';\nimport { useFonts } from 'expo-font';\nvar Stack = createStackNavigator();\nvar Tab = createBottomTabNavigator();\nvar storeConfig = store();\n\nvar MySwitchs = function MySwitchs() {};\n\nvar MyTabs = function MyTabs() {\n  return React.createElement(Tab.Navigator, {\n    initialRouteName: \"Home\",\n    tabBarOptions: {\n      activeTintColor: \"purple\",\n      inactiveTintColor: \"lightgray\"\n    },\n    screenOptions: function screenOptions(_ref) {\n      var route = _ref.route;\n      return {\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var focused = _ref2.focused,\n              color = _ref2.color,\n              size = _ref2.size;\n          var iconName;\n\n          if (route.name == \"Home\") {\n            iconName = 'home';\n          } else if (route.name == \"Profile\") {\n            iconName = 'user';\n          }\n\n          return React.createElement(Icon, {\n            name: iconName,\n            color: color,\n            size: size,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 18\n            }\n          });\n        }\n      };\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, React.createElement(Tab.Screen, {\n    name: \"Home\",\n    component: Home,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), React.createElement(Tab.Screen, {\n    name: \"Profile\",\n    component: Profile,\n    options: {\n      tabBarBadge: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar MyStacks = function MyStacks() {\n  return React.createElement(Stack.Navigator, {\n    initialRouteName: \"Loading\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, React.createElement(Stack.Screen, {\n    name: \"Login\",\n    component: Login,\n    options: {\n      headerTransparent: true,\n      headerLeft: null,\n      title: ''\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Loading\",\n    component: Loading,\n    options: {\n      headerTransparent: true,\n      title: ''\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Details\",\n    component: Details,\n    options: {\n      headerTransparent: true,\n      title: ''\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Home\",\n    component: MyTabs,\n    options: {\n      headerTransparent: true,\n      title: '',\n      headerLeft: null\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Test\",\n    component: Test,\n    options: {\n      headerTransparent: true,\n      title: '',\n      headerLeft: null\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default function App() {\n  var _useFonts = useFonts({\n    'roboto': require(\"./assets/fonts/Roboto-Regular.ttf\"),\n    'roboto-Black': require(\"./assets/fonts/Roboto-Black.ttf\"),\n    'roboto-Bold': require(\"./assets/fonts/Roboto-Bold.ttf\"),\n    'roboto-Italic': require(\"./assets/fonts/Roboto-Italic.ttf\"),\n    'roboto-Light': require(\"./assets/fonts/Roboto-Light.ttf\"),\n    'roboto-Thin': require(\"./assets/fonts/Roboto-Thin.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  if (!fontsLoaded) {\n    return React.createElement(AppLoading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return React.createElement(Provider, {\n    store: storeConfig,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, React.createElement(NavigationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, React.createElement(MyStacks, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  text: {\n    fontSize: 30,\n    fontWeight: \"bold\",\n    color: \"#834a99\",\n    marginRight: 10\n  }\n});","map":{"version":3,"sources":["C:/xampp/htdocs/sideaside/App.js"],"names":["React","AsyncStorage","NavigationContainer","createStackNavigator","createBottomTabNavigator","Home","Login","Loading","Profile","Test","Details","Icon","Provider","store","AppLoading","useFonts","Stack","Tab","storeConfig","MySwitchs","MyTabs","activeTintColor","inactiveTintColor","route","tabBarIcon","focused","color","size","iconName","name","tabBarBadge","MyStacks","headerTransparent","headerLeft","title","App","require","fontsLoaded","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","text","fontSize","fontWeight","marginRight"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;SACqBC,Y;AACrB,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SAASC,wBAAT,QAAyC,+BAAzC;AAEA,OAAOC,IAAP;AACA,OAAOC,KAAP;AACA,OAAOC,OAAP;AACA,OAAOC,OAAP;AACA,OAAOC,IAAP;AACA,OAAOC,OAAP;AACA,OAAOC,IAAP,MAAiB,gCAAjB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP;AAEA,SAASC,UAAT,QAA2B,MAA3B;AACA,SAASC,QAAT,QAAyB,WAAzB;AAGA,IAAMC,KAAK,GAAGb,oBAAoB,EAAlC;AAEA,IAAMc,GAAG,GAAGb,wBAAwB,EAApC;AAEA,IAAMc,WAAW,GAAGL,KAAK,EAAzB;;AAEA,IAAMM,SAAS,GAAG,SAAZA,SAAY,GAAM,CAEvB,CAFD;;AAIA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnB,SACE,oBAAC,GAAD,CAAK,SAAL;AAAe,IAAA,gBAAgB,EAAC,MAAhC;AACE,IAAA,aAAa,EAAE;AACbC,MAAAA,eAAe,EAAE,QADJ;AAEbC,MAAAA,iBAAiB,EAAE;AAFN,KADjB;AAME,IAAA,aAAa,EAAE;AAAA,UAAGC,KAAH,QAAGA,KAAH;AAAA,aAAgB;AAC7BC,QAAAA,UAAU,EAAE,2BAA8B;AAAA,cAA3BC,OAA2B,SAA3BA,OAA2B;AAAA,cAAlBC,KAAkB,SAAlBA,KAAkB;AAAA,cAAXC,IAAW,SAAXA,IAAW;AACxC,cAAIC,QAAJ;;AACA,cAAIL,KAAK,CAACM,IAAN,IAAc,MAAlB,EAA0B;AACxBD,YAAAA,QAAQ,GAAG,MAAX;AACD,WAFD,MAEO,IAAIL,KAAK,CAACM,IAAN,IAAc,SAAlB,EAA6B;AAClCD,YAAAA,QAAQ,GAAG,MAAX;AACD;;AACD,iBAAO,oBAAC,IAAD;AAAM,YAAA,IAAI,EAAEA,QAAZ;AAAsB,YAAA,KAAK,EAAEF,KAA7B;AAAoC,YAAA,IAAI,EAAEC,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AAT4B,OAAhB;AAAA,KANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAkBE,oBAAC,GAAD,CAAK,MAAL;AAAY,IAAA,IAAI,EAAC,MAAjB;AAAwB,IAAA,SAAS,EAAEtB,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBF,EAmBE,oBAAC,GAAD,CAAK,MAAL;AAAY,IAAA,IAAI,EAAC,SAAjB;AAA2B,IAAA,SAAS,EAAEG,OAAtC;AAA+C,IAAA,OAAO,EAAE;AACtDsB,MAAAA,WAAW,EAAE;AADyC,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBF,CADF;AAyBD,CA1BD;;AA4BA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAErB,SAEE,oBAAC,KAAD,CAAO,SAAP;AACE,IAAA,gBAAgB,EAAC,SADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,OAAnB;AAA2B,IAAA,SAAS,EAAEzB,KAAtC;AACE,IAAA,OAAO,EAAE;AACP0B,MAAAA,iBAAiB,EAAE,IADZ;AAEPC,MAAAA,UAAU,EAAE,IAFL;AAGPC,MAAAA,KAAK,EAAE;AAHA,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAWE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,SAAnB;AAA6B,IAAA,SAAS,EAAE3B,OAAxC;AACE,IAAA,OAAO,EAAE;AACPyB,MAAAA,iBAAiB,EAAE,IADZ;AAEPE,MAAAA,KAAK,EAAE;AAFA,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,EAiBE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,SAAnB;AAA6B,IAAA,SAAS,EAAExB,OAAxC;AACE,IAAA,OAAO,EAAE;AACPsB,MAAAA,iBAAiB,EAAE,IADZ;AAEPE,MAAAA,KAAK,EAAE;AAFA,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBF,EAuBE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,MAAnB;AAA0B,IAAA,SAAS,EAAEd,MAArC;AACE,IAAA,OAAO,EAAE;AACPY,MAAAA,iBAAiB,EAAE,IADZ;AAEPE,MAAAA,KAAK,EAAE,EAFA;AAGPD,MAAAA,UAAU,EAAE;AAHL,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBF,EA8BE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,MAAnB;AAA0B,IAAA,SAAS,EAAExB,IAArC;AACE,IAAA,OAAO,EAAE;AACPuB,MAAAA,iBAAiB,EAAE,IADZ;AAEPE,MAAAA,KAAK,EAAE,EAFA;AAGPD,MAAAA,UAAU,EAAE;AAHL,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9BF,CAFF;AAyCD,CA3CD;;AA4CA,eAAe,SAASE,GAAT,GAAe;AAAA,kBACRpB,QAAQ,CAAC;AAC3B,cAAUqB,OAAO,qCADU;AAE3B,oBAAgBA,OAAO,mCAFI;AAG3B,mBAAeA,OAAO,kCAHK;AAI3B,qBAAiBA,OAAO,oCAJG;AAK3B,oBAAgBA,OAAO,mCALI;AAM3B,mBAAeA,OAAO;AANK,GAAD,CADA;AAAA;AAAA,MACvBC,WADuB;;AAU5B,MAAI,CAACA,WAAL,EAAkB;AAChB,WAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AACD,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEnB,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAQD;AAED,IAAMoB,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP,GADoB;AAO/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE,EADN;AAEJC,IAAAA,UAAU,EAAE,MAFR;AAGJtB,IAAAA,KAAK,EAAE,SAHH;AAIJuB,IAAAA,WAAW,EAAE;AAJT;AAPyB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { StyleSheet, AsyncStorage } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs'\n\nimport Home from './src/screens/Home'\nimport Login from './src/screens/Login'\nimport Loading from './src/screens/Loading'\nimport Profile from './src/screens/Profile'\nimport Test from './src/screens/Test'\nimport Details from './src/screens/Details'\nimport Icon from '@expo/vector-icons/FontAwesome'\nimport { Provider } from 'react-redux'\nimport store from './src/store/'\n\nimport { AppLoading } from 'expo';\nimport { useFonts } from 'expo-font';\n\n\nconst Stack = createStackNavigator()\n\nconst Tab = createBottomTabNavigator()\n\nconst storeConfig = store()\n\nconst MySwitchs = () => {\n\n}\n\nconst MyTabs = () => {\n  return (\n    <Tab.Navigator initialRouteName=\"Home\"\n      tabBarOptions={{\n        activeTintColor: \"purple\",\n        inactiveTintColor: \"lightgray\",\n\n      }}\n      screenOptions={({ route }) => ({\n        tabBarIcon: ({ focused, color, size }) => {\n          let iconName\n          if (route.name == \"Home\") {\n            iconName = 'home'\n          } else if (route.name == \"Profile\") {\n            iconName = 'user'\n          }\n          return <Icon name={iconName} color={color} size={size} />\n        }\n      })}\n    >\n      <Tab.Screen name=\"Home\" component={Home} />\n      <Tab.Screen name=\"Profile\" component={Profile} options={{\n        tabBarBadge: 1\n      }} />\n    </Tab.Navigator>\n  )\n}\n\nconst MyStacks = () => {\n\n  return (\n\n    <Stack.Navigator\n      initialRouteName=\"Loading\"\n    >\n\n      <Stack.Screen name=\"Login\" component={Login}\n        options={{\n          headerTransparent: true,\n          headerLeft: null,\n          title: '',\n        }}\n      />\n      <Stack.Screen name=\"Loading\" component={Loading}\n        options={{\n          headerTransparent: true,\n          title: '',\n        }}\n      />\n      <Stack.Screen name=\"Details\" component={Details}\n        options={{\n          headerTransparent: true,\n          title: '',\n        }}\n      />\n      <Stack.Screen name=\"Home\" component={MyTabs}\n        options={{\n          headerTransparent: true,\n          title: '',\n          headerLeft: null,\n        }}\n      />\n      <Stack.Screen name=\"Test\" component={Test}\n        options={{\n          headerTransparent: true,\n          title: '',\n          headerLeft: null,\n        }}\n      />\n    </Stack.Navigator>\n  )\n}\nexport default function App() {\n  let [fontsLoaded] = useFonts({\n    'roboto': require('./assets/fonts/Roboto-Regular.ttf'),\n    'roboto-Black': require('./assets/fonts/Roboto-Black.ttf'),\n    'roboto-Bold': require('./assets/fonts/Roboto-Bold.ttf'),\n    'roboto-Italic': require('./assets/fonts/Roboto-Italic.ttf'),\n    'roboto-Light': require('./assets/fonts/Roboto-Light.ttf'),\n    'roboto-Thin': require('./assets/fonts/Roboto-Thin.ttf')\n  });\n\n  if (!fontsLoaded) {\n    return <AppLoading />;\n  }\n  return (\n    <Provider store={storeConfig}>\n      <NavigationContainer>\n        <MyStacks />\n      </NavigationContainer>\n    </Provider>\n  )\n\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 30,\n    fontWeight: \"bold\",\n    color: \"#834a99\",\n    marginRight: 10\n  }\n});\n"]},"metadata":{},"sourceType":"module"}